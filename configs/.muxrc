# ~/.muxrc to be included in ~/.bashrc
MUX=true

# Initialize own tools
export PYTHONPATH="$PYTHONPATH:$MUX_HOME/sandbox/python"

# Bash config
if [ $(basename $SHELL) == bash ]; then
    PS1='\n\[\033[01;32m\]\u \[\033[01;34m\]@\h \[\033[01;32m\]\D{%H:%M:%S} \[\033[01;34m\]\w\[\033[00m\]\n\$ '
fi

# Prints first existing file from arguments
function first_existing_file() {
    for file in $@; do
        if [ -f "$file" ]; then
            echo "$file"
            return 0
        fi
    done
}

# QtCreator silent run [PROJECT_FILE]
function sqtcreator() {
    CMD="qtcreator ${@:-$(first_existing_file *.pro CMakeLists.txt)}"
    echo $CMD
    $CMD >/dev/null 2>&1 &
}

# Colorfull less output of COMMAND [ARGS...]
function cless() {
    "$@" --color=always | LESS=FRX less
}

# CD to windows path (assuming drives are mounted to /)
function wcd() {
    local path=${1/\\/\/}
    if [ $(cut -c2-2 <<< "$path") == ":" ]; then
        local drive=/$(cut -c1-1 <<< "$path")
        path=${drive,,}$(cut -c3- <<< "$path")
    fi
    cd "$path"
}

# Find NAME in [DIR] or . and [TYPE]
function f() {
    find "${2:-.}" -name "$1" $([ "$3" ] && echo -type "$3")
}

# Grep PATTERN [DIR] or stdin
function g() {
    local dir=${2:-$(if [ ! -t 1 ]; then echo .; fi)}
    if [[ "$dir" ]]; then
        grep -rI "$1" "$dir"
    else
        grep "$1"
    fi
}

# Start tmux or screen as main terminal emulator
TERMINAL_MULTIPLEXER=$(which tmux 2>/dev/null || which screen 2>/dev/null)
if [[ $TERMINAL_MULTIPLEXER ]] && [[ $TERM != "screen" ]]; then
    exec $TERMINAL_MULTIPLEXER
fi

